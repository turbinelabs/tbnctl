// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/falun/genny

package main

import (
	"bytes"

	"github.com/turbinelabs/api"
	"github.com/turbinelabs/api/objecttype"
	"github.com/turbinelabs/api/service"
	"github.com/turbinelabs/codec"
)

type routeAdapter struct {
	service.Route
}

var _ typelessIface = routeAdapter{}

func (_ routeAdapter) Type() objecttype.ObjectType {
	return objecttype.Route
}

func (a routeAdapter) Create(o interface{}) (interface{}, error) {
	return a.Route.Create(o.(api.Route))
}

func (a routeAdapter) Get(k string) (interface{}, error) {
	return a.Route.Get(api.RouteKey(k))
}

func (a routeAdapter) Modify(nxt interface{}) (interface{}, error) {
	return a.Route.Modify(nxt.(api.Route))
}

func (a routeAdapter) Delete(k string, cs api.Checksum) error {
	return a.Route.Delete(api.RouteKey(k), cs)
}

func (a routeAdapter) Index() ([]interface{}, error) {
	objs, err := a.Route.Index()
	if err != nil {
		return nil, err
	}

	result := make([]interface{}, 0, len(objs))
	for i := range objs {
		result = append(result, objs[i])
	}

	return result, nil
}

func (a routeAdapter) Zero() interface{} {
	return api.Route{}
}

func (a routeAdapter) ObjFromString(s string, cd codec.Codec) (interface{}, error) {
	dest := api.Route{}
	r := bytes.NewReader([]byte(s))
	err := cd.Decode(r, &dest)
	return dest, err
}

func (a routeAdapter) Checksum(o interface{}) api.Checksum {
	return o.(api.Route).Checksum
}

func mkGetRoute(svc *unifiedSvc) func(k api.RouteKey) (api.Route, error) {
	cache := map[api.RouteKey]api.Route{}
	return func(k api.RouteKey) (api.Route, error) {
		if o, ok := cache[k]; ok {
			return o, nil
		}

		o, err := svc.Route().Get(k)
		if err == nil {
			cache[k] = o
		}
		return o, err
	}
}

// underlying allows introspection to the underlying interface for testing
// purposes
func (a routeAdapter) underlying() interface{} {
	return a.Route
}
